IF YOUR SWAGGER IS NOT OPPENING ADD THIS IN LAUNCH URL OF profiles{Express AND YOUR PROJECT(TheCompleteProject) }
"launchUrl": "swagger"
INDEX
STEP 1> START WITH THE PROJECT STRUCTURE
STEP 3> SET-UP THE PROJECT STRUCTURE i.e with ALL THE GENERIC CODE
STEP 3> CONNECTION STRING AND CONFIGURE SWAGGER
STEP 4> AutoMapper Install
STEP 5> UNIT OF WORK
STEP 6> ADDED AUTO REGISTERING SERVICES AutoRegisterDi
STEP 7> ADD Exception Filter
STEP 8> WORKING WITH FILES
STEP 9> BINDING OF APP SETTING WITH APPSETTING CLASS 
STEP 10> ADDED JSON WEB TOKENS JWT
STEP 11> WORKING WITH STORE PROCEDURES
STEP 12> JWT REFRESH TOKENS
STEP 13> STORE PROCEDURE OUTPUT PARAMETER
STEP 14> GENERIC RESPONSE
STEP 15> ROLE BASE AUTHORIZATION
--------------------------------INSTALLATIONS FROM NUGGET

1>Microsoft.EntityFrameworkCore
2>Microsoft.EntityFrameworkCore.SqlServer
3>Swashbuckle.AspNetCore


--------------------------------  STEP 1> START WITH THE PROJECT STRUCTURE ADD A BLANKSOLUTION & IN THE BLANK SOLUTION (ADD THE FOLLOWING CLASS LIBRARY) AND (1 WEB API PROJECT)

1>TheCompleteProject.Api ... Blank Solution (webapi) 
2>TheCompleteProject.ModelsAndDto's
3>TheCompleteProject.Repository
3>TheCompleteProject.Service
3>TheCompleteProject.Utility


--------------------------------  STEP 2> START WITH THE PROJECT STRUCTURE ADD A BLANKSOLUTION & IN THE BLANK SOLUTION (ADD 4 CLASS LIBRARY) AND (1 WEB API PROJECT)
CREATE THE BASE REPOSITORY CLASS IN THE 
3>TheCompleteProject.Repository  : It Will Contain The Comman Code That is Generic Code That Will Be Use Througout The Application Implementation

--------------------------------  STEP 3> AFTER THE BASE REPOSITORY CODE IS COMPLETED NOW YOU CAN ADD CONNECTION STRING AND CONFIGURE SWAGGER
1>A CONNECTION STRING IN STARTUP.CS AND APPSETTING.JSON AND CHECKED IF THE CONNECTIONS ARE MADE AND THE APPLICATONDBCONTEXT IS INITIALIZED PROPERLY
2>CONFIGURE SWAGGER.CS IN THE STARTUP FOR TESTING API'S

--------------------------------  STEP 4>ADD AutoMapper Install The Following Packages
1>AutoMapper
2>AutoMapper.Extensions.Microsoft.DependencyInjection



--------------------------------  STEP 5>ADD Unit Of Work
It will contain an Interface and a method SaveChangesAsync
We will have to initialize all the repository here


--------------------------------  STEP 6> ADDED AUTO REGISTERING SERVICES AutoRegisterDi
THE PURPOSE OF THIS FILE IS AFTER ADDING THIS FILE YOU DO NOT NEED TO ADD THE I SERVICE PART YOU ONLY HAVE TO ADD THE REPOSITORIES IN STARTUP 

    //services.AddScoped(typeof(IUserRepository), typeof(UserRepository))
              .AddScoped(typeof(IUserService), typeof(UserService));



ADD THE FOLLOWING PACKAGES

1> NetCore.AutoRegisterDi

ADD A CLASS APPSETTINGS
STARTUP CODE
public void ConfigureServices(IServiceCollection services)
{
        
}

ADDED AN EXTENSION METHOD OF THE ABOVE CLASS IN API LAYER 

public static class IServiceCollectionExtension
{
    public static void RegisterServices(this IServiceCollection services)
    {
        var assembliesToScan = new[]
        {
         Assembly.GetExecutingAssembly(),
         Assembly.GetAssembly (typeof (IBaseService))
        };
    
        services.RegisterAssemblyPublicNonGenericClasses(assembliesToScan)
            .AsPublicImplementedInterfaces();
    }
}

ADDED A BLANK INTERFACE CLASS IN SERVICE LAYER

public interface IBaseService
{

}

--------------------------------  STEP 7>ADD Exception Filter : CONFIGURE IT IN STARTUP IS THE FIRST STEP AND REMEBER TO CONFIGURE IT ABOVE 
  app.UseAuthorization(); MIDDELWARE
For Exception Filter Added A Middleware Folder And in that added a Class ExceptionMiddelware
1> That class will have the following method : 
     public async Task InvokeAsync(HttpContext context, RequestDelegate next)
        {
            try
            {
                await next(context);
            }
            catch (Exception ex)
            {
                await HandleExceptionAsync(context, ex);
            }
        }
So the role of this class is that its processes your request and if An Error is found it catches the error  ANd we add a custom
method that gives us the type of error 
        private async Task HandleExceptionAsync(HttpContext context , Exception exception)
        {
            context.Response.ContentType = "application/json";
            var exceptionData = GetExceptionDetails(exception);
            context.Response.StatusCode = (int)exceptionData.StatusCode;
            await context.Response.WriteAsync(exceptionData.ToString());
        }
We can add as many Else block as we want
        private ResponseModel GetExceptionDetails(Exception exception)
        {
            var model = new ResponseModel();
            var exceptionType = exception.GetType();

            if (exceptionType == typeof(UnauthorizedAccessException))
            {
                model.StatusCode = (int)HttpStatusCode.Unauthorized;
                model.Message = exception.Message;
            }
               else if (exceptionType == typeof(BadResultException))
            {
                model.StatusCode = (int)HttpStatusCode.BadRequest;
                model.Message = exception.Message;
            }
            else
            {
                model.StatusCode = (int)HttpStatusCode.InternalServerError;
                model.Message = exception.Message;
            }
            return model;
        }
    }

2> And for Each Else block we add a corresoponding class 

  [Serializable]
    public class BadResultException : Exception
    {
        public BadResultException()
        {

        }

        public BadResultException(string message) : base(message)
        {

        }
        public BadResultException(string message, Exception inner) : base(message, inner)
        {

        }
    }

-------------------------------- STEP 8> WORKING WITH FILES

1> START WITH UTILS FOLDER   ... ADDED BULK IMPORT FOLDER 
1. ADDED ExportImportHelper 
2. IgnoreInExportAttribute
3. LanguageContentLoader

2> START WITH UTILS FOLDER   ... ADDED A FOLDER named LOCATIONS FOLDER 

3> START WITH UTILS FOLDER   ... ADDED A MULTIMEDIA HELPERS FOLDER 
ADD CORRESPONDING METHODS
1. GetBase64String()
2. GetPath()
3. GenerateFile()
4. GenerateFileFromBase64String()

In This Section I have First Added Any Type of file with FFCSaveAttachments Controller 
Then I have uploaded a file that is bulk upload with  ... FileUploadCompliance Controller

==>ADDED A CONTROLLER FileUploadComplianceWithCustomResponse
1> WE HAVE TO USE IFORMFILE TO ACCPET THE FILE FROM THE USER  IN MY CASE ==> UploadUser
2> CREATE A SAME MODEL AS EXCEL IN MY CASE ==> UploadUserErrorDto

3> CREATE 2 LIST ONE FOR PROCESSING THE ERROR DATA AND ONE FOR PROCESSING THE SUCCESS DATA 
ERROR DATA WILL HAVE ALL THE SAME COLUMNS AS EXCEL AND A ERROR LIST PROPERTY ==>UploadUserErrorDto

4> ADD A FLUENT VALIDATION CLASS ==> UploadUserValidator


----ALSO TO WORK WITH DATATABLES
I HAVE CREATED THIN CONTROLLER WorkingWithDataTableController..HERE WE HAVE AN EXAMPLE OF HOW TO FETCH 
A COLUMN FROM THEIR NAME

-------------------------------- STEP 9> BINDING OF APPSETTING.JSON WITH APP SETTING CLASS IN UTILITY

FOR BINDING THE APP SETTING CLASS WE NEED TO ADD A CLASS AND PUT ALL THE CONFIGURATION FROM APPSETTING.JSON PROPERTIES  IN 
THAT CLASS

STARTUP CODE

public void ConfigureServices(IServiceCollection services)
{
    var appSettingSection = Configuration.GetSection("AppSettings");
    services.Configure<AppSettings>(appSettingSection);
    var appSettings = appSettingSection.Get<AppSettings>();
}

CONSTRUCTOR 
private readonly IUserService _userService;
private readonly AppSettings _appSettings;


public UsersController(IUserService userService, IOptions<AppSettings> appSettings)
{
    _userService = userService;
    _appSettings = appSettings.Value;

}

-------------------------------- STEP 10> ADDED JSON WEB TOKENS JWT

SO IN THE STARTUP CODE THE 
VALID ISSUER :   (ISSUER IS THE SERVER OR DOMAIN THAT IS ISSUING A JWT TOKEN)WE HAVE SET THIS TO FALSE THAT MEANS FOR NOW WE ARE ACCEPTING REQUESTS FROM ANY PORT
VALID AUDIENCE : (AUDIENCE ARE THE PEOPLE THAT IS GOING TO USE THE SERVER) WE HAVE SET THIS TO FALSE THAT MEANS FOR NOW WE ARE ACCEPTING REQUESTS FROM ANY PORT

STARTUP CODE

public void ConfigureServices(IServiceCollection services)
{
#region JWT
    //    var key = Encoding.ASCII.GetBytes(appSettings.Secret);
    
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
    {
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        ValidateIssuer = false,
        ValidateAudience = false,
        ValidAudience = Configuration["Jwt:Audience"],
        ValidIssuer = Configuration["Jwt:Issuer"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Secret"]))
    };
    });

#endregion
}

-------------------------------- STEP 11> WORKING WITH STORE PROCEDURES
SCRIPTS ARE UPDATED IN REPOSITORY SCRIPTS
CLASS NAME CommonStoreProcedure

1] RETURNING DYNAMIC COLUMN NAME
NOTE IF WE WANT TO RETURN ONLY ONE COLUMN NAME WE CAN MAKE USE OF THE DYNAMIC OVERLOADED VERSION OF 
STORE PROCEDURE

REFRENCE 
   public class StoreProcedureCalls : ControllerBase
    {
        [HttpGet("DynamicStoreProcedureGet")]
        public async Task<IActionResult> DynamicStoreProcedureCallAsync(int id)
        {
            var result = await CommonStoreProcedure.GetUserNameByIdAsync(id);
            return Ok(result);
        }
    }


2] RETURNING VOID

REFRENCE
   public class StoreProcedureCalls : ControllerBase
    {
        [HttpPost("VoidStoreProcedure")]
        public IActionResult AddVoid(string UserName, string Email, string Password, int RoleId)
        {
            CommonStoreProcedure.AddUsersBySp(UserName, Email, Password, RoleId);
            return Ok("Record Added");
        }
    }


-------------------------------- STEP 12> JWT REFRESH TOKENS
REFRENCES
--https://codepedia.info/aspnet-core-jwt-refresh-token-authentication
--https://www.c-sharpcorner.com/article/jwt-authentication-with-refresh-tokens-in-net-6-0/

1> ADDED A MODEL FOR (TOKENS) THIS MODEL IS FOR RESPONSES
2> ADDED A DBMODEL FOR SAVING JWT REFRESH TOKEN (UserRefreshTokens)

ADDED A SERVICE THAT DEALS WITH TOKEN GENERATION 
  public interface IJWTManagerService
    {
        Tokens GenerateToken(string userName);
        Tokens GenerateToken(Users userModel);
        Tokens GenerateRefreshToken(string userName);
        ClaimsPrincipal GetPrincipalFromExpiredToken(string token);
    }

3> ADDED A REPOSITORY FOR IJwtRefreshTokenRepository THAT TAKES (UserRefreshTokens) SO WE CAN PERFORM 
THE GENERICS OPERATIONS IE(CRUD OPERATIONS)
ADDED SERVICE FOR ABOVE REPOSITORY THAT DEALS WITH REFRESH TOKENS
    public interface IJwtRefreshTokenService
    {
        Task<bool> IsValidUserAsync(Users users);

        Task<UserRefreshTokens> AddUserRefreshTokens(UserRefreshTokens user);

        Task<UserRefreshTokens> GetSavedRefreshTokensAsync(string username, string refreshToken);

        Task DeleteUserRefreshTokensAsync(string username, string refreshToken);
    }

4> NOW ADD A CONTROLLER
   public class AuthenticationWithRefreshTokenController : ControllerBase
   {
        added 2 end points
        [Route("Authenticate")]
        public async Task<IActionResult> Authenticate([FromBody] LoginRequestDto loginDto)
        {
        }
        [Route("Refresh")]
        public async Task<IActionResult> RefreshAsync(Tokens token)
        {
        }
   }

-------------------------------- STEP 13> SQL OUTPUT PARAMETER STORE PROCEDURE

ADDED THIS 2 PACKAGED
1>Newtonsoft.Json
2>Microsoft.AspNetCore.MvcNewtonsoft.Json

3> ADDED THIS SETTING IN START UP FOR SEL REFRENCING LOOP
#region FOR THIS ERROR Self referencing loop detected for property 'Table' with type 'System.Data.DataTable'. Path 'Columns[0]'.
            services.AddControllersWithViews().AddNewtonsoftJson(options => options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore); 
 #endregion

//NOTE THE ASYNCHRONUS METHOD DOES NOT TAKE OUT PARAMETER HENCE WE HAVE NOT MARKED THIS ASYNC

 public static GetUsersDto GetUsersBySp(int from, int to, out int totalRecords, string search = "")
        {
            totalRecords = 0;

            var fromParameter = new SqlParameter("@From", from);
            var toParameter = new SqlParameter("@To", to);
            var searchParameter = new SqlParameter("@Search", search == null ? "" : search);

            var totalRecordsParameter = new SqlParameter("@TotalRecords", totalRecords);
            totalRecordsParameter.Direction = ParameterDirection.Output;

            var param = new List<SqlParameter>
            {
                fromParameter
               ,toParameter
               ,searchParameter
               ,totalRecordsParameter
            };

            var result = Task.Run(async () => await SQLHelper.ExecuteProcedure<Users>("sp_FetchUser", param)).Result;
            totalRecords = Convert.ToInt32(totalRecordsParameter.Value);

            GetUsersDto usersDto = new GetUsersDto();
            usersDto.Users = result.ToList();
            usersDto.TotalRecords = totalRecords;

            return usersDto;
        }

-------------------------------- STEP 14> ADDED GENERIC RESPONSE CONTROLLER AND SERVICE 
ADDED A CLASS GENERIC RESPONSE IN UTILITY CLASS LIBRARY  FOR GETTING CUSTOM RESPONSE
 public class GenericResponse : IGenericResponse
{
    
}

public class GenericResponsesController : BaseController
{

       [Route("AuthenticateWithGenericResponse")]
        public async Task<Dictionary<string, object>> Authenticate([FromBody] LoginRequestDto login)
        {
        }
}

-------------------------------- STEP 15> ROLE BASE AUTHORIZATION
PLEASE REFER

 public class AuthenticationRoleBased : BaseController
 {
    
 }